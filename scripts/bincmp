#!/usr/bin/python3 -O

#
# Copyright (c) 2018-2023, chys <admin@CHYS.INFO>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of chys <admin@CHYS.INFO> nor the names of other
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import fcntl
import locale
import multiprocessing
import os
import re
import resource
import signal
import subprocess
import sys
import socket
import stat


UNASSEMBLY = 'unassembly'


def sub_asterisks(m, *, rex=re.compile(b'[\da-f]', re.A)):
    return rex.sub(b'*', m.group(1))


RE_ASTERISKS = re.compile(br'^[ \t]*[\da-f]+:[ \t]*((?:[\da-f][\da-f]\s|[\da-f]{8}\s)*)',
                          re.M | re.A)
RE_ADDRESS_FOR_SYM = re.compile(br'[\da-f]+\s+<', re.A)
RE_RESOLVED_ABS_ADDR = re.compile(br'# [\da-f]+$', re.M | re.A)
RE_OFFSET_FROM_SYM = re.compile(
    br'<([][ \w<>:@*&()~,.+\-*/=]+)[+\-]0x[\da-f]+>', re.A)
RE_RIP_RELATIVE = re.compile(br'0x[\da-f]+\(%rip\)', re.A)
RE_ABS_ADDR = re.compile(
    br'0x(?:[1-9a-f][\da-f]{4,5}|1[\da-f]{6}|8[0-4][\da-f]{5})(?![\da-f])',
    re.A)
RE_GCC_GEN_FUNCTION_NAMES = re.compile(
    br'\.(isra|part|constprop|cold)\.\d+(?=[+>\-\.])')


def dump_filter(txt):
    # Replace machine code with asterisks. Remove addresses preceding them.
    txt = RE_ASTERISKS.sub(sub_asterisks, txt)
    # Remove addresses before '<'
    txt = RE_ADDRESS_FOR_SYM.sub(b'<', txt)
    # Remove resolved addresses for ...(%rip) (llvm-objdump only)
    txt = RE_RESOLVED_ABS_ADDR.sub(b'', txt)
    # Remove offsets relative to symbols
    txt = RE_OFFSET_FROM_SYM.sub(br'<\1+0x....>', txt)
    # Remove offsets relative to RIP
    txt = RE_RIP_RELATIVE.sub(b'0x....(%rip)', txt)
    # Obfuscate what appear to be absolute addresses
    txt = RE_ABS_ADDR.sub(b'0x....', txt)
    # Obfuscate some special function names
    txt = RE_GCC_GEN_FUNCTION_NAMES.sub(br'.\1....', txt)

    return txt


class Output:
    def __init__(self, fd):
        self._fd = fd
        self._o = []

        # Make fd nonblocking
        fcntl.fcntl(fd, fcntl.F_SETFL,
                    fcntl.fcntl(fd, fcntl.F_GETFL) | os.O_NONBLOCK)

    def add(self, s):
        o = self._o
        fd = self._fd

        o.append(s)
        try:
            while o:
                num = os.write(fd, o[0])
                if num >= len(o[0]):
                    del o[0]
                else:
                    o[0] = o[0][num:]
        except BlockingIOError:  # EAGAIN
            pass

    def write_all(self):
        fd = self._fd
        fcntl.fcntl(fd, fcntl.F_SETFL,
                    fcntl.fcntl(fd, fcntl.F_GETFL) & ~os.O_NONBLOCK)

        # Don't use writev(fd, self._o).
        # self._o can be too long
        # (It appears that Python would try to concatenate them, resulting
        # in too much memory consumption)
        for chunk in self._o:
            os.write(fd, chunk)


def do_dump(fname, fw, *close_files):
    for fd in close_files:
        os.close(fd)

    unassembly = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                              UNASSEMBLY)

    # Don't do the regular expression substitution at once.
    # That easily consume too much memory for large files.
    try:
        PREFERED_SIZE = 65536  # Linux pipe size

        with subprocess.Popen(
                (unassembly, '--no-string-literal-annotation', fname),
                stdout=subprocess.PIPE, close_fds=True) as proc:
            fasm = proc.stdout
            txt = fasm.read(PREFERED_SIZE)

            # Remove filename on "file format" line
            k = txt.find(b'file format', 0, 128)
            if k >= 0:
                k = txt.rfind(b':', 0, k)
                if k >= 0:
                    txt = txt[k:]

            try:
                out = Output(fw)

                while txt:
                    k = txt.rfind(b'\n') + 1
                    if k <= 0:
                        k = len(txt)
                    work = txt[:k]
                    txt = txt[k:]

                    work = dump_filter(work)
                    out.add(work)

                    txt += fasm.read(PREFERED_SIZE)

                out.write_all()
            except BrokenPipeError:  # EPIPE
                pass
    finally:
        os.close(fw)


def identical_file(file1, file2):
    '''Return True if and only if the two files are identical'''
    with open(file1, 'rb') as f1, open(file2, 'rb') as f2:
        s1 = os.fstat(f1.fileno())
        s2 = os.fstat(f2.fileno())
        if not stat.S_ISREG(s1.st_mode) or not stat.S_ISREG(s2.st_mode):
            # Not regular file. Anything can happen.
            return False
        if (s1.st_dev == s2.st_dev) and (s1.st_ino == s2.st_ino):
            # Same inode on same device
            return True
        if s1.st_size != s2.st_size:  # Not the same size
            return False
        # Now actually compare. Don't read everything in at once
        s = s1.st_size
        while s > 0:
            rs = min(8192, s)
            c1 = f1.read(rs)
            c2 = f2.read(rs)
            if (c1 != c2) or (len(c1) != rs):
                return False
            s -= rs
        return True


def do_diff(file1, file2):
    if identical_file(file1, file2):
        return 0

    # Since Python 3.2, os.pipe uses pipe2(fds,O_CLOEXEC), so we explicitly use
    # pipe2 to suppress that
    (fr1, fw1) = os.pipe2(0)
    (fr2, fw2) = os.pipe2(0)

    # Use a socket so that we can take advantage of MSG_PEEK
    (fs1, fs2) = socket.socketpair()

    diff = subprocess.Popen(
        ['colordiff', '-U', '10', f'/dev/fd/{fr1}', f'/dev/fd/{fr2}'],
        pass_fds=(fr1, fr2), stdout=fs2)

    os.close(fr1)
    os.close(fr2)
    fs2.close()

    # It's very important to close all dups of fw1 and fw2 in time.
    # Otherwise we easily deadlock.
    dump1 = multiprocessing.Process(target=do_dump, args=(file1, fw1, fw2))
    dump1.start()
    do_dump(file2, fw2, fw1)  # dump2. Just do it in the main process.
    dump1.join()

    # Any result from diff?
    if not fs1.recv(1, socket.MSG_PEEK):  # Nothing
        fs1.close()
        diff.wait()
        return 0
    else:  # Run pager
        pager = subprocess.Popen(('less', '-R'), stdin=fs1, close_fds=True)
        fs1.close()
        diff.wait()
        return pager.wait()


def main():
    locale.setlocale(locale.LC_ALL, 'C')

    # Unassembly can be very large. Limit memory usage.
    resource.setrlimit(resource.RLIMIT_AS,
                       (2 * 1024 * 1024 * 1024, resource.RLIM_INFINITY))

    parser = argparse.ArgumentParser(description='Compare two object files')
    parser.add_argument('files', nargs=2, metavar='filename')
    args = parser.parse_args()

    sys.exit(do_diff(*args.files))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(128 + signal.SIGINT)
