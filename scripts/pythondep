#! /usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Copyright (c) 2014-2024 chys <admin@CHYS.INFO>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of chys <admin@CHYS.INFO> nor the names of other
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#


import argparse
import os
import re
import sys


def _check_python_version(args):
    with open(args.filename) as f:
        line = f.readline()

    # No she-bang.  Consider version OK.
    if not line.startswith('#!'):
        return True, None

    shebang = line[2:].split()

    if not shebang or not shebang[0].startswith('/'):
        return True, None

    interpreter = shebang[0]
    if interpreter == '/usr/bin/env' and len(shebang) > 1:
        interpreter = shebang[1]

    if not os.path.isabs(interpreter):
        import shutil
        full_interpreter = shutil.which(interpreter) or interpreter
    else:
        full_interpreter = interpreter

    if full_interpreter == sys.executable:
        return True, None

    return False, shebang + sys.argv


class _Formatter:
    __slot__ = '_res',

    def __init__(self):
        self._res = ''

    def __str__(self):
        return self._res

    def add(self, target: str, srcs: list[str]):
        raise NotImplementedError


class _MakeFormatter(_Formatter):
    __slots__ = ()

    def add(self, target: str, srcs: list[str]):
        self._res += f'{target}:'
        for src in srcs:
            self._res += f' \\\n\t{src}'
        self._res += '\n\n'


class _NinjaDynDepFormatter(_Formatter):
    __slots__ = ()

    def __init__(self):
        super().__init__()
        self._res += 'ninja_dyndep_version = 1\n'

    def add(self, target: str, srcs: list[str]):
        self._res += f'build {target}: dyndep | {" ".join(srcs)}\n'


def _print_dependency(args):
    import modulefinder

    finder = modulefinder.ModuleFinder()
    try:
        finder.run_script(args.filename)
    except AttributeError:  # No idea why
        # Try again, it likely works
        finder.run_script(args.filename)

    if args.format == 'ninja_dyndep':
        formatter = _NinjaDynDepFormatter()
    else:
        formatter = _MakeFormatter()

    files = []
    for mod in finder.modules.values():
        # ' ' not in path: Kill "setuptools/script template.py"
        if (path := mod.__file__) and ' ' not in path:
            files.append(path)

    with open(args.filename, 'rb') as f:
        content = f.read()
    for extra in re.findall(br'^#\s*pythondep:(.*)$', content, re.MULTILINE):
        extras = extra.split()
        for f in extras:
            if not f:
                continue
            f = f.decode()
            files.append(os.path.normpath(
                os.path.join(os.path.dirname(args.filename), f)))

    files.sort()
    formatter.add(args.target, files)

    if args.dummy and args.format != 'ninja_dyndep':
        for path in files:
            if ' ' not in path:
                formatter.add(path, [])

    print(str(formatter))


def main():
    parser = argparse.ArgumentParser(
        description="Build Makefile-style dependency for Python")
    parser.add_argument('-t', '--target', help='Target name', required=True)
    parser.add_argument('-f', '--format', help='format (default is make)',
                        choices=('make', 'ninja_dyndep'))
    parser.add_argument('--no-dummy', help='Don\'t add dummy rules',
                        dest='dummy', default=True, action='store_false')
    parser.add_argument('--no-shebang',
                        help='Don\'t examine the she-bang line. '
                             'Instead, assume we\'re running the right '
                             'interpreter.',
                        action='store_true', default=False)
    parser.add_argument('filename', help='Python filename')
    args = parser.parse_args()

    if not args.no_shebang:
        version_ok, cmdline = _check_python_version(args)
        if not version_ok:
            cmdline.append('--no-shebang')
            import subprocess
            sys.exit(subprocess.call(cmdline))

    _print_dependency(args)


if __name__ == '__main__':
    main()
