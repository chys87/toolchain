#!/usr/bin/env python3

#
# Copyright (c) 2022-2023, chys <admin@CHYS.INFO>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of chys <admin@CHYS.INFO> nor the names of other
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# This tool has essentially the same purpose as gtest-parallel
# (https://github.com/google/gtest-parallel), but we always treat each
# test as a whole.
# We currently do not cache run time like gtest-parallel, so we never reorder
# test cases.

import argparse
import fcntl
import io
import json
import os
import re
import shlex
import signal
import subprocess
import sys
import tempfile
import time


class SpeedMemo:
    '''Remebers the time each test requires.
    '''
    def __init__(self, binary):
        self.binary = os.path.realpath(binary)
        self.fname = os.path.expanduser('~/.chys.fast_gtest.json')
        self.update_dic = {}

    def _get_key(self, test_desc):
        return '|'.join(test_desc).rstrip('|')

    def _load(self):
        try:
            with open(self.fname) as f:
                fcntl.flock(f, fcntl.LOCK_SH)
                if old_json := f.read():
                    return json.loads(old_json)
                else:
                    return {}
        except FileNotFoundError:
            return {}

    def sort_tests(self, tests):
        dic = self._load().get(self.binary, {})
        tests.sort(key=lambda test_desc: \
                        dic.get(self._get_key(test_desc), [1e10, 0])[0],
                   reverse=True)

    def remember(self, test_desc, ms):
        self.update_dic[self._get_key(test_desc)] = ms

    def _save(self):
        now = int(time.time())
        expire_time = now + 128 * 86400

        with open(self.fname, 'r+') as f:
            fcntl.flock(f, fcntl.LOCK_EX)
            if old_json := f.read():
                dic = json.loads(old_json)
            else:
                dic = {}

            # Update into dic
            binary_dic = dic.setdefault(self.binary, {})
            for test_desc, ms in self.update_dic.items():
                if old := binary_dic.get(test_desc):
                    ms = (old[0] + ms) * .5
                binary_dic[test_desc] = [ms, expire_time]

            # Remove expired items
            for binary, binary_dic in list(dic.items()):
                for test_desc, (ms, exp) in list(binary_dic.items()):
                    if exp <= now:
                        del binary_dic[test_desc]
                if not binary_dic:
                    del dic[binary]

            # Save
            f.seek(0, io.SEEK_SET)
            f.truncate(0)
            json.dump(dic, f, ensure_ascii=False)


    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self.update_dic:
            self._save()


class Executor:
    def __init__(self, binary, additional_args, wrapper):
        self.binary = binary
        self.additional_args = additional_args
        if wrapper:
            self.wrapper_args = shlex.split(wrapper)
        else:
            self.wrapper_args = []

    def get_tests(self):
        args = (self.wrapper_args + [self.binary, '--gtest_list_tests'] +
                self.additional_args)
        proc = subprocess.run(args,
                              stdout=subprocess.PIPE, text=True, check=True)
        return re.findall(r'^([\w/]+)\.(\s+#.*)?$', proc.stdout, re.MULTILINE)

    def run(self):
        args = self.wrapper_args + [self.binary] + self.additional_args
        return subprocess.run(args)

    def start_test(self, test):
        args = (self.wrapper_args +
                [self.binary, '--gtest_color=yes', f'--gtest_filter={test}.*']
                + self.additional_args)
        f = tempfile.TemporaryFile()
        proc = subprocess.Popen(args, stdout=f, stderr=subprocess.STDOUT)
        return f, proc


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('binary')
    parser.add_argument('additional_args', nargs='*')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='Print full message for all tests')
    parser.add_argument('--wrapper', help='Executable wrapper (e.g. Intel SDE)')
    args = parser.parse_args()

    with SpeedMemo(args.binary) as speed_memo:
        exe = Executor(args.binary, args.additional_args, args.wrapper)
        tests = exe.get_tests()
        speed_memo.sort_tests(tests)

        tests_n = len(tests)
        if tests_n == 0:
            return
        if tests_n == 1:
            r = exe.run()
            sys.exit(r.returncode)

        concurrency = min(os.cpu_count(), tests_n)

        pending = tests[::-1]
        running = []

        signals = {signal.SIGCLD}
        signal.pthread_sigmask(signal.SIG_BLOCK, signals)

        ret_code = 0

        while running or (ret_code == 0 and pending):
            while ret_code == 0 and pending and len(running) < concurrency:
                test, comment = pending.pop()
                f, proc = exe.start_test(test)
                running.append((test, comment, f, proc, time.time()))
                print(f'\033[32;1m[ RUN    ]\033[0m {test}{comment or ""}')

            signal.sigwait(signals)

            for i in range(len(running) - 1, -1, -1):
                test, comment, f, proc, start_ts = running[i]
                code = proc.poll()
                if code is None:
                    continue
                del running[i]
                ms = int((time.time() - start_ts) * 1000)
                speed_memo.remember((test, comment), ms)
                if code == 0:
                    print(f'\033[32;1m[     OK ]\033[0m {test} ({ms} ms)')
                    if args.verbose:
                        f.seek(0)
                        sys.stdout.buffer.write(f.read())
                else:
                    print(f'\033[31;1m[ FAILED ]\033[0m {test} ({ms} ms)')
                    f.seek(0)
                    sys.stdout.buffer.write(f.read())
                    ret_code = ret_code or code
        sys.exit(ret_code)


if __name__ == '__main__':
    main()
