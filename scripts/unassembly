#!/usr/bin/python3

#
# Copyright (c) 2018-2023, chys <admin@CHYS.INFO>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of chys <admin@CHYS.INFO> nor the names of other
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#


import argparse
import glob
import locale
import os
import re
import shlex
import shutil
import signal
import subprocess
import sys


def get_lines(it, count):
    '''
    Try to get count lines from an iterator.
    Note than count is only a hint, and that we may return fewer or more lines.
    We assume the iterator may generate multiple lines at one iteration
    (Some of my own iterators do so to achieve better performance)
    '''
    txt = b''
    try:
        while txt.count(b'\n') < count:
            txt += next(it)
    except StopIteration:
        pass
    return txt


def cppfilter(fi):
    simple_replaces = (  # Don't use a dict. We want orders.
        (b'(anonymous namespace)', b'(a)'),
        (b'unsigned int', b'uint'),
        (b'unsigned long', b'ulong'),
        (b'unsigned short', b'ushort'),
        (b'unsigned char', b'uchar'),
        (b'> >', b'>>'),
        (b'> >', b'>>'),  # Do it again so "> > > >", etc. are substituted properly

        (b'::less<void>', b'::less<>'),
        (b'::greater<void>', b'::greater<>'),
        (b'::equal_to<void>', b'::equal_to<>'),

        (b'(__gnu_cxx::_Lock_policy)0', b'__gnu_cxx::_S_single'),
        (b'(__gnu_cxx::_Lock_policy)1', b'__gnu_cxx::_S_mutex'),
        (b'(__gnu_cxx::_Lock_policy)2', b'__gnu_cxx::_S_atomic'),
    )

    # This pattern catches templates up to 3 levels
    __type = br'(?:[^,<>]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)+'

    __character_literals_escape = {
        ord('\r'): br'\r',
        ord('\n'): br'\n',
        ord('\t'): br'\t',
        ord('\a'): br'\a',
        ord('\b'): br'\b',
        ord('\v'): br'\v',
        ord('\f'): br'\f',
        ord('\x1f'): br'\e',
        ord('\\'): br'\\',
        ord('\''): br'\'',
        ord('\"'): br'\"',
    }

    __character_literal_char = {
        b'char': b'',
        b'char8_t': b'u8',
        b'char16_t': b'u',
        b'char32_t': b'U',
        b'wchar_t': b'L',
    }

    def __replace_character_literals(m, *, _digits_re=re.compile(br'\d+'), _escape=__character_literals_escape, _char=__character_literal_char):
        ctype = m.group(1)

        res = b''
        numbers = [int(x) for x in _digits_re.findall(m.group(0))]

        try:
            if ctype in (b'char', b'char8_t'):
                res = bytes(numbers)
            elif ctype == b'char16_t':
                u16 = []
                for num in numbers:
                    u16.append(num >> 16)
                    u16.append(num & 65535)
                res = bytes(u16).decode('utf-16be').encode('utf-8')
            else:  # Assume UTF-32
                res = ''.join(map(chr, numbers)).encode('utf-8')
        except (UnicodeError, ValueError):
            return m.group(0)

        print_res = b''

        for ch in res:
            esc = _escape.get(ch)
            if esc:
                print_res += esc
            elif ch < 0x20:
                print_res += '\\x{:02x}'.format(ch).encode()
            else:
                print_res += bytes([ch])

        if len(numbers) == 1:
            return _char[ctype] + b'\'' + print_res + b'\''
        else:
            return b'(' + _char[ctype] + b'\"' + print_res + b'\")'

    pattern_replaces = (
        (re.compile(br'::basic_string<char, std::(__\d+::)?char_traits<char>, std::(__\d+::)?allocator<char>>'), b'::string'),
        (re.compile(br'::basic_string<wchar_t, std::(__\d+::)?char_traits<wchar_t>, std::(__\d+::)?allocator<wchar_t>>'), b'::wstring'),
        (re.compile(br'::basic_string<char(\d+)_t, std::(__\d+::)?char_traits<char\1_t>, std::(__\d+::)?allocator<char\1_t>>'), br'::u\1string'),
        (re.compile(
            br'::basic_string_view<char, std::(__\d+::)?char_traits<char>>'), b'::string_view'),
        (re.compile(br'::basic_string_view<wchar_t, std::(__\d+::)?char_traits<wchar_t>>'), b'::wstring_view'),
        (re.compile(br'::basic_string_view<char(\d+)_t, std::(__\d+::)?char_traits<char\1_t>>'),
         br'::u\1string_view'),
        (re.compile(br' \[clone ([.\w]+)]'),
         br'\1'),
        (re.compile(br'::unique_ptr<(.+), std::default_delete<\1>>'),
         br'::unique_ptr<\1>'),
        (re.compile(br'::(vector|list|deque|forward_list|_List_base|_Vector_base)<(.+), std::(__\d+::)?allocator<\2>>'),
         br'::\1<\2>'),
        (re.compile(br'::(multimap|map)<(.+), (.+), std::less<\2>, std::(__\d+::)?allocator<std::pair<\2 const, \3>>>'),
         br'::\1<\2, \3>'),
        (re.compile(br'::(multimap|map)<(.+), (.+), std::less<>, std::(__\d+::)?allocator<std::pair<\2 const, \3>>>'),
         br'::\1<\2, \3, std::less<>>'),
        (re.compile(br'::(multimap|map)<(.+), (.+), (std::(__\d+::)?locale), std::(__\d+::)?allocator<std::pair<\2 const, \3>>>'),
         br'::\1<\2, \3, \4>'),
        (re.compile(br'::set<(.+), std::(__\d+::)?less<\1>, std::(__\d+::)?allocator<\1>>'),
         br'::set<\1>'),
        (re.compile(br'::set<(.+), std::(__\d+::)?less<>, std::(__\d+::)?allocator<\1>>'),
         br'::set<\1, std::less<>>'),
        (re.compile(br'::set<(.+), (std::(__\d+::)?locale), std::(__\d+::)?allocator<\1>>'),
         br'::set<\1, \2>'),
        (re.compile(br'::unordered_set<(.+), ([^<>]+), std::(__\d+::)?equal_to<\1>, std::(__\d+::)?allocator<\1>>'),
         br'::unordered_set<\1, \2>'),
        (re.compile(br'::unordered_set<(.+), std::(__\d+::)?hash<\1>, std::equal_to<\1>, std::(__\d+::)?allocator<\1>>'),
         br'::unordered_set<\1>'),
        (re.compile(br'::unordered_set<(.+), std::(__\d+::)?hash<\1 const&>, std::(__\d+::)?equal_to<\1>, std::(__\d+::)?allocator<\1>>'),
         br'::unordered_set<\1, std::hash<\1 const\&>>'),
        (re.compile(br'::unordered_map<(.+), (.+), std::(__\d+::)?hash<\1>, std::(__\d+::)?equal_to<\1>, std::(__\d+::)?allocator<std::pair<\1 const, \2>>>'),
         br'::unordered_map<\1, \2>'),
        (re.compile(br'::_Rb_tree<(.*), (std::pair<\1 const, (.*)>), std::_Select1st<\2>,'),
         br'::_Rb_tree<\1, \2, std::_Select1st<(...)>,'),
        (re.compile(br'::_Rb_tree<(.*), (std::pair<\1 const, (.*)>), std::_Select1st<\(\.\.\.\)>, std::less<\1>, std::allocator<\2>>'),
         br'::_Rb_tree<\1, \2>'),
        (re.compile(br'::_Rb_tree<(.*), (std::pair<\1 const, (.*)>), std::_Select1st<\(\.\.\.\)>, std::less<>, std::allocator<\2>>'),
         br'::_Rb_tree<\1, \2, std::_Select1st<...>, std::less<>>'),
        (re.compile(br'::_Rb_tree<(.*), \1, std::_Identity<\1>,'),
         br'::_Rb_tree<\1, \1, std::_Identity<(...)>,'),
        (re.compile(br'::_Rb_tree<(.*), \1, std::_Identity<\(\.\.\.\)>, std::less<\1>, std::allocator<\1>>'),
         br'::_Rb_tree<\1, \1>'),
        (re.compile(br'::_Rb_tree<(.*), \1, std::_Identity<\(\.\.\.\)>, std::less<>, std::allocator<\1>>'),
         br'::_Rb_tree<\1, \1, std::_Identity<...>, std::less<>>'),
        (re.compile(br'::unordered_map<(.+), (.+), std::hash<\1 const&>, std::equal_to<\1>, std::allocator<std::pair<\1 const, \2>>>'),
         br'::unordered_map<\1, \2, std::hash<\1 const\&>>'),
        (re.compile(br'::(basic_[io]stream|endl|__copy_streambufs|__ostream_insert|[io]streambuf_iterator|basic_(?:stream|file)buf|basic_ios|operator>>|operator<< )<(.+), std::char_traits<\2>>'),
         br'::\1<\2>'),
        (re.compile(br'::(basic_stringbuf)<(.*), std::char_traits<\2>, std::allocator<\2>>'),
         br'::\1<\2>'),
        # Do this after other STL replacements
        (re.compile(br'std::allocator<' + __type + br'>'),
         br'std::allocator<(...)>'),
        (re.compile(br'::span<(' + __type + \
                    br'), (?:18446744073709551615ul|4294967295u)>'), br'::span<\1>'),
        (re.compile(br'::span<(' + __type + br'), (?:18446744073709551615ul|4294967295u)>'),
         br'::span<\1>'),  # Repeat so we can catch nested spans
        (re.compile(br'\{lambda\([^()]*\)'),
         br'{lambda'),
        (re.compile(br'float __vector\(4\)'),
         br'__m128'),
        (re.compile(br'long long __vector\(2\)'),
         br'__m128i'),
        (re.compile(br'char __vector\(16\)'),
         br'__v16qi'),
        (re.compile(br'long long __vector\(4\)'),
         br'__m256i'),
        (re.compile(br'\((char|wchar_t|char8_t|char16_t|char32_t)\)\d+(,\s?\(\1\)\d+)*'), __replace_character_literals),

        # std::ratio
        (re.compile(br'::ratio<1l*, 1000000000000000000000000l*>'), br'::yocto'),
        (re.compile(br'::ratio<1l*, 1000000000000000000000l*>'), br'::zepto'),
        (re.compile(br'::ratio<1l*, 1000000000000000000l*>'), br'::atto'),
        (re.compile(br'::ratio<1l*, 1000000000000000l*>'), br'::femto'),
        (re.compile(br'::ratio<1l*, 1000000000000l*>'), br'::pico'),
        (re.compile(br'::ratio<1l*, 1000000000l*>'), br'::nano'),
        (re.compile(br'::ratio<1l*, 1000000l*>'), br'::micro'),
        (re.compile(br'::ratio<1l*, 1000l*>'), br'::milli'),
        (re.compile(br'::ratio<1l*, 100l*>'), br'::centi'),
        (re.compile(br'::ratio<1l*, 10l*>'), br'::deci'),
        (re.compile(br'::ratio<10l*, 1l*>'), br'::deca'),
        (re.compile(br'::ratio<100l*, 1l*>'), br'::hecto'),
        (re.compile(br'::ratio<1000l*, 1l*>'), br'::kilo'),
        (re.compile(br'::ratio<1000000l*, 1l*>'), br'::mega'),
        (re.compile(br'::ratio<1000000000l*, 1l*>'), br'::giga'),
        (re.compile(br'::ratio<1000000000000l*, 1l*>'), br'::tera'),
        (re.compile(br'::ratio<1000000000000000l*, 1l*>'), br'::peta'),
        (re.compile(br'::ratio<1000000000000000000l*, 1l*>'), br'::exa'),
        (re.compile(br'::ratio<1000000000000000000000l*, 1l*>'), br'::zetta'),
        (re.compile(br'::ratio<1000000000000000000000000l*, 1l*>'), br'::yotta'),
        (re.compile(br'::ratio<(\d+l*), 1l*>'), br'::ratio<\1>'),

        # std::chrono
        # We assume the standard library uses either long or long (in
        # theory, this may mis-replace user-defined types)
        (re.compile(br'::duration<long(?: long)?, std::(nano|micro|mini)>'),
         br'::\1seconds'),
        (re.compile(br'::duration<long(?: long)?, std::ratio<1l*>>'), br'::seconds'),
        (re.compile(br'::duration<long(?: long)?, std::ratio<60l*>>'), br'::minutes'),
        (re.compile(br'::duration<long(?: long)?, std::ratio<3600l*>>'), br'::hours'),
        (re.compile(br'::duration<long(?: long)?, std::ratio<86400l*>>'), br'::days'),
        (re.compile(br'::duration<long(?: long)?, std::ratio<604800l*>>'), br'::weeks'),

        # type traits
        (re.compile(br'std::is_same<(' + __type + br'), \1>::value'), br'true'),  # But we cannot reliably replace anything by false!!
        (re.compile(br'std::conditional<true, (' + __type + br'), ' + __type + br'>::type'), br'\1'),
        (re.compile(br'std::conditional<false, ' + __type + br', (' + __type + br')>::type'), br'\1'),

        # absl specific
        (re.compile(br'absl::flat_hash_set<(.+), absl::hash_internal::Hash<\1>, std::(__\d+::)?equal_to<\1>, std::(__\d+::)?allocator<\1>>'),
         br'absl::flat_hash_set<\1>'),

        # fmtlib specific
        (re.compile(br'fmt::(\w+)::basic_string_view<char>'), br'fmt::\1::string_view'),
        (re.compile(br'fmt::(\w+)::basic_format_args<fmt::\1::basic_format_context<fmt::\1::appender, char>>'), br'fmt::\1::format_args'),
        (re.compile(br'fmt::\w+::type_identity<(.*?)>::type'), br'\1'),
        (re.compile(br'fmt::(\w+)::basic_format_specs<char>'), br'fmt::\1::format_specs'),
        (re.compile(br'fmt::(\w+)::basic_format_string<char, '), br'fmt::\1::format_string<'),
        (re.compile(br'fmt::(\w+)::basic_format_string<wchar_t, '), br'fmt::\1::wformat_string<'),

        # cbu specific
        (re.compile(br'\bcbu::basic_zstring_view<(.+), std::(__\d+::)?char_traits<\1>>'),
         br'cbu::basic_zstring_view<\1>'),
        (re.compile(br'cbu::basic_zstring_view<char>'), b'cbu::zstring_view'),
        (re.compile(br'cbu::basic_zstring_view<wchar_t>'), b'cbu::wzstring_view'),
        (re.compile(br'cbu::basic_zstring_view<char(\d+)_t>'), br'cbu::u\1zstring_view'),
    )

    def do_replace(data):
        for _ in range(5):
            bak = data
            for old, new in simple_replaces:
                data = data.replace(old, new)
            for pattern, replace in pattern_replaces:
                data = pattern.sub(replace, data)
            if bak == data:
                break
        return data

    data = b''
    for txt in fi:
        data += txt
        if len(data) >= 8192:  # An arbitrary threshold
            yield do_replace(data)
            data = b''
    if data:
        fi = None
        yield do_replace(data)


__special_readable_chars = {
    ord('\r'): b'\\r',
    ord('\n'): b'\\n',
    ord('\t'): b'\\t',
}


def __to_readable_string(hex_part):
    if len(hex_part) % 2 != 0:
        hex_part = b'0' + hex_part
    bytestr = bytes.fromhex(hex_part.decode())[::-1]  # Little endian
    res = b''

    def add_encoded(byte):
        nonlocal res
        res += '\\x{:02x}'.format(byte).encode()

    # Allow string to start with some following bytes of UTF-8
    while bytestr and (bytestr[0] & 0xc0) == 0x80:
        add_encoded(bytestr[0])
        bytestr = bytestr[1:]

    if res and not bytestr:
        return None

    utf8buffer = b''
    for byte in bytestr:
        ch = bytes([byte])
        if ((byte & 0xe0) == 0xc0 or (byte & 0xf0) == 0xe0 or
            (byte & 0xf8) == 0xf0):
            # Starting bytes of UTF-8
            if not utf8buffer:
                return None
            utf8buffer += ch
            continue
        elif (byte & 0xc0) == 0x80:
            # Following bytes of UTF-8
            if not utf8buffer:
                return None
            utf8buffer += ch
            try:
                utf8buffer.decode('utf-8')
                res += utf8buffer
                utf8buffer = b''
            except UnicodeDecodeError:
                pass
            continue
        elif 0x20 <= byte < 0x7f or byte in __special_readable_chars:
            if utf8buffer:
                return None
            if byte in __special_readable_chars:
                res += __special_readable_chars[byte]
            else:
                if ch in (b'\\', b'\"'):
                    res += b'\\'
                res += ch
        else:
            return None

    if utf8buffer:
        if not res:
            return None
        for byte in utf8buffer:
            add_encoded(byte)

    return res

def annotate_string_literals(fi):
    ptn = re.compile(br'(?:mov|cmp)(?:[bwlq]|absq?)?\s+\$0x([0-9a-f]+),[^#\n]*(?=\n)')

    def sub(match):
        hex_part = match.group(1)
        readable = __to_readable_string(hex_part)
        res = match.group(0)
        if readable:
            res += b'\t\t # 0x' + hex_part + b' = "' + readable + b'"'
        return res

    def do_replace(data):
        return ptn.sub(sub, data)

    data = b''
    for txt in fi:
        data += txt
        if len(data) >= 8192:  # An arbitrary threshold
            yield do_replace(data)
            data = b''

    if data:
        fi = None
        yield do_replace(data)


def yield_possible_headers(filename, target):
    target = target.replace('-', '_')  # x86-64 -> x86_64

    yield from glob.iglob(f'/usr/include/{target}*/{filename}')
    yield from glob.iglob(f'/usr/{target}*/include/{filename}')

    if os.uname().machine == target:
        yield f'/usr/include/{filename}'


def read_header(filename, target):
    for path in yield_possible_headers(filename, target):
        try:
            with open(path, 'rb') as f:
                return f.read()
        except FileNotFoundError:
            pass
    else:
        sys.exit(f'Unable to find a proper header file {filename}')


def read_syscall_table(target):
    pattern = re.compile(br'^#define\s+__NR_(\w+)\s+(\d+)$', re.M)
    if target == 'x86_64':
        filename = 'asm/unistd_64.h'
    else:
        filename = 'asm-generic/unistd.h'
    table = {int(m.group(2)): m.group(1)
             for m in pattern.finditer(read_header(filename, target))}

    if target == 'x86_64':
        # x86-64 ILP32 (x32 ABI) syscalls
        pattern = re.compile(
            br'^#define\s+__NR_([_a-z\d]+)\s+\(__X32_SYSCALL_BIT \+ (\d+)\)$', re.M)
        table.update((int(m.group(2)) + 0x40000000, m.group(1))
                     for m in pattern.finditer(read_header('asm/unistd_x32.h', target)))

    return table


def split_tail_lines(data: bytes, k: int = 1):
    r'''
    Split the last k lines from the bytes
    E.g. split_tail_lines(b'a\nb\nc\n', 2) --> (b'a\n', b'b\nc\n')
    If the number of lines is <= k, returns (b'', data)
    '''
    idx = -1
    for _ in range(k):
        next_idx = data.rfind(b'\n', 0, idx)
        if next_idx < 0:
            return b'', data
        idx = next_idx
    return data[:idx+1], data[idx+1:]


def syscall_replace(fi):
    data = get_lines(fi, 3)  # In cases of static libraries, we need 3 lines

    if b'x86-64' in data:
        yield from syscall_replace_x86_64(fi, data)
    elif b'aarch64' in data:
        yield from syscall_replace_aarch64(fi, data)
    else:
        yield data
        yield from fi
        return


def syscall_replace_x86_64(fi, data):
    # x86-64 LP64 syscalls
    table = read_syscall_table('x86_64')

    pattern_syscall_instruction = re.compile(
            br'(?:mov[blq]?\s+\$((?:0x)?[a-f\d]+),\s*%[er]?a[xl]|xor[lq]?\s+%[er]ax,\s*%[er]ax)\s*(?=\n([\da-f:\s]*\n|.+(lea|mov|xor|add|sub|clt|sh[lr]|push|pop).+\n){,5}.+\ssyscall)')
    pattern_syscall_function = re.compile(
            br'(?:mov[blq]?\s+\$((?:0x)?[a-f\d]+),\s*%[er]?dil?|xor[lq]?\s+%[er]dx,\s*%[er]dx)\s*(?=\n([\da-f:\s]*\n|.+(lea|mov|xor|add|sub|clt|sh[lr]|push|pop).+\n){,5}.+<syscall)')

    def sub(match):
        no_str = match.group(1)
        if no_str:
            no = int(no_str, 0)
        else:
            no = 0  # XOR EAX, EAX
        res = match.group(0)
        try:
            res += b'\t\t # ' + table[no]
        except KeyError:
            pass
        return res

    while fi is not None:
        newdata = get_lines(fi, 100)  # An arbitrary threshold
        if newdata.count(b'\n') < 100:
            fi = None
        if not newdata:
            break
        data += newdata
        data = pattern_syscall_instruction.sub(sub, data)
        data = pattern_syscall_function.sub(sub, data)

        # Yield all lines except the last 6
        yield_data, data = split_tail_lines(data, 6)
        if yield_data:
            yield yield_data

    # Yield remaining things
    if data:
        data = pattern_syscall_instruction.sub(sub, data)
        data = pattern_syscall_function.sub(sub, data)
        yield data


def syscall_replace_aarch64(fi, data):
    # aarch64 LP64 syscalls
    table = read_syscall_table('aarch64')

    pattern_svc_instruction = re.compile(
            br'mov\s+[wx]8,\s*#(\d+|0x[a-f\d]+)\s*(?:\/\/\s*#\d+)?(?=\n([\da-f:\s]*\n|.+(movk?|ldr|st[rp]|nop)(\s.*)?\n){,5}.+\ssvc\s+#(0|0x0)(\s|\n))')

    def sub(match):
        no_str = match.group(1)
        no = int(no_str, 0)
        res = match.group(0)
        try:
            res += b'\t\t // ' + table[no]
        except KeyError:
            pass
        return res

    while fi is not None:
        newdata = get_lines(fi, 100)  # An arbitrary threshold
        if newdata.count(b'\n') < 100:
            fi = None
        if not newdata:
            break
        data += newdata
        data = pattern_svc_instruction.sub(sub, data)

        # Yield all lines except the last 6
        yield_data, data = split_tail_lines(data, 6)
        if yield_data:
            yield yield_data

    # Yield remaining things
    if data:
        data = pattern_svc_instruction.sub(sub, data)
        yield data


def safe_write(f, data):  # Safe against broken pipe
    try:
        f.write(data)
        return True
    except BrokenPipeError:  # Broken pipe
        return False


def find_objdump():
    argv = ['objdump']
    objdump = os.environ.get('OBJDUMP')
    if objdump:
        argv = shlex.split(objdump)
    # commented out for now (llvm-objdump fails to demangle symbols followed
    #                        by "@plt")
    # else:
    #     objdump = shutil.which('llvm-objdump')
    #     if objdump:
    #         argv = [objdump, '--print-imm-hex']

    objdump_flags = os.environ.get('OBJDUMPFLAGS')
    if objdump_flags:
        argv += shlex.split(objdump_flags)
    return argv


def main():
    locale.setlocale(locale.LC_ALL, 'C')

    parser = argparse.ArgumentParser(
        description='Unassembly a program in a friendly way.')
    parser.add_argument('--no-string-literal-annotation', action='store_true')
    parser.add_argument('filename', help='File to unassembly')
    args = parser.parse_args()

    objdump = subprocess.Popen(find_objdump() + ['-C', '-r', '-d', args.filename],
                               close_fds=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    fi = objdump.stdout
    fi = cppfilter(fi)

    if sys.platform.startswith('linux'):
        fi = syscall_replace(fi)

    if not args.no_string_literal_annotation:
        # Do this after syscall_replace to avoid annotating a syscall number
        # as a string literal
        fi = annotate_string_literals(fi)

    # An arbitrary threshold
    FLUSH_THRESHOLD = 8192
    # Try to improve pipe performance by always flushing multiple of 4KiB
    FLUSH_UNIT = 4096

    if not os.isatty(sys.stdout.fileno()):
        # Write to a pipe, whatever.
        # Prevents message at SIGPIPE
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)
        data = b''
        for txt in fi:
            data += txt
            if len(data) >= FLUSH_THRESHOLD:
                l = len(data) // FLUSH_UNIT * FLUSH_UNIT
                sys.stdout.buffer.write(data[:l])
                data = data[l:]
        fi = None
        sys.stdout.buffer.write(data)
    else:
        # We call less ourselves.
        # In this case, we should exit with 0 rather than SIGPIPE if we get it.
        pager = subprocess.Popen(
            ['less'],
            close_fds=True,
            stdin=subprocess.PIPE)
        fo = pager.stdin
        data = b''
        for txt in fi:
            data += txt
            if len(data) >= FLUSH_THRESHOLD:
                l = len(data) // FLUSH_UNIT * FLUSH_UNIT
                if not safe_write(fo, data[:l]):
                    break
                data = data[l:]
        else:
            if data:
                safe_write(fo, data)
        try:
            fo.close()
        except BrokenPipeError:  # Broken pipe
            pass
        sys.exit(pager.wait())


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(128 + signal.SIGINT)
