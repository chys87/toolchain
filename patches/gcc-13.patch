diff --git a/gcc/common/config/i386/cpuinfo.h b/gcc/common/config/i386/cpuinfo.h
index 61559ed9de2..29fa19caab7 100644
--- a/gcc/common/config/i386/cpuinfo.h
+++ b/gcc/common/config/i386/cpuinfo.h
@@ -686,6 +686,12 @@ get_available_features (struct __processor_model *cpu_model,
 #define set_feature(f) \
   set_cpu_feature (cpu_model, cpu_features2, f)
 
+#ifdef __x86_64__
+  edx |= bit_CMOV;
+  edx |= bit_MMX;
+  edx |= bit_SSE;
+  edx |= bit_SSE2;
+#endif
   if (edx & bit_CMOV)
     set_feature (FEATURE_CMOV);
   if (edx & bit_MMX)
diff --git a/libstdc++-v3/include/bits/basic_string.h b/libstdc++-v3/include/bits/basic_string.h
index 8247ee6bdc6..bfe829ab8b9 100644
--- a/libstdc++-v3/include/bits/basic_string.h
+++ b/libstdc++-v3/include/bits/basic_string.h
@@ -683,7 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
 	if (__str._M_is_local())
 	  {
 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
-			      __str.length() + 1);
+			      _S_local_capacity + 1);
 	  }
 	else
 	  {
@@ -722,7 +722,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
 	if (__str._M_is_local())
 	  {
 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
-			      __str.length() + 1);
+			      _S_local_capacity + 1);
 	    _M_length(__str.length());
 	    __str._M_set_length(0);
 	  }
@@ -1114,6 +1114,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
       resize(size_type __n)
       { this->resize(__n, _CharT()); }
 
+      __attribute__((__always_inline__))
+      void
+      __resize_default_init(size_type __n)
+      { reserve(__n); _M_set_length(__n); }
+
 #if __cplusplus >= 201103L
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
@@ -1169,8 +1174,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
       size_type
       capacity() const _GLIBCXX_NOEXCEPT
       {
+	size_type ac = _M_allocated_capacity;
 	return _M_is_local() ? size_type(_S_local_capacity)
-	                     : _M_allocated_capacity;
+	                     : ac;
       }
 
       /**
diff --git a/libstdc++-v3/include/bits/basic_string.tcc b/libstdc++-v3/include/bits/basic_string.tcc
index 99fdbeee5ad..bb0531bc500 100644
--- a/libstdc++-v3/include/bits/basic_string.tcc
+++ b/libstdc++-v3/include/bits/basic_string.tcc
@@ -67,38 +67,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       if (_M_is_local())
 	if (__s._M_is_local())
 	  {
-	    if (length() && __s.length())
 	      {
 		_CharT __tmp_data[_S_local_capacity + 1];
 		traits_type::copy(__tmp_data, __s._M_local_buf,
-				  __s.length() + 1);
+				  _S_local_capacity + 1);
 		traits_type::copy(__s._M_local_buf, _M_local_buf,
-				  length() + 1);
+				  _S_local_capacity + 1);
 		traits_type::copy(_M_local_buf, __tmp_data,
-				  __s.length() + 1);
-	      }
-	    else if (__s.length())
-	      {
-		traits_type::copy(_M_local_buf, __s._M_local_buf,
-				  __s.length() + 1);
-		_M_length(__s.length());
-		__s._M_set_length(0);
-		return;
-	      }
-	    else if (length())
-	      {
-		traits_type::copy(__s._M_local_buf, _M_local_buf,
-				  length() + 1);
-		__s._M_length(length());
-		_M_set_length(0);
-		return;
+				  _S_local_capacity + 1);
 	      }
 	  }
 	else
 	  {
 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
-			      length() + 1);
+			      _S_local_capacity + 1);
 	    _M_data(__s._M_data());
 	    __s._M_data(__s._M_local_buf);
 	    _M_capacity(__tmp_capacity);
@@ -109,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  if (__s._M_is_local())
 	    {
 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
-				__s.length() + 1);
+				_S_local_capacity + 1);
 	      __s._M_data(_M_data());
 	      _M_data(_M_local_buf);
 	    }
diff --git a/libstdc++-v3/include/bits/string_view.tcc b/libstdc++-v3/include/bits/string_view.tcc
index 854b61e435d..5550ca5cd92 100644
--- a/libstdc++-v3/include/bits/string_view.tcc
+++ b/libstdc++-v3/include/bits/string_view.tcc
@@ -42,6 +42,18 @@ namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
+  template <typename size_type>
+  inline constexpr auto __string_view_not_npos(size_type v) noexcept {
+#if defined __has_builtin
+#if __has_builtin(__builtin_assume)
+    __builtin_assume(v != size_type(-1));
+#elif __has_builtin(__builtin_unreachable)
+    if (v == size_type(-1)) __builtin_unreachable();
+#endif
+#endif
+    return v;
+  }
+
   template<typename _CharT, typename _Traits>
     constexpr typename basic_string_view<_CharT, _Traits>::size_type
     basic_string_view<_CharT, _Traits>::
@@ -69,7 +81,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  // We already know that __first[0] == __s[0] but compare them again
 	  // anyway because __s is probably aligned, which helps memcmp.
 	  if (traits_type::compare(__first, __str, __n) == 0)
-	    return __first - _M_str;
+	    return __string_view_not_npos(__first - _M_str);
 	  __len = __last - ++__first;
 	}
       return npos;
@@ -86,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  const size_type __n = this->_M_len - __pos;
 	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
 	  if (__p)
-	    __ret = __p - this->_M_str;
+	    __ret = __string_view_not_npos(__p - this->_M_str);
 	}
       return __ret;
     }
diff --git a/libstdc++-v3/libsupc++/exception_ptr.h b/libstdc++-v3/libsupc++/exception_ptr.h
index 5be69817a8f..74c6250c43b 100644
--- a/libstdc++-v3/libsupc++/exception_ptr.h
+++ b/libstdc++-v3/libsupc++/exception_ptr.h
@@ -256,7 +256,11 @@ namespace std _GLIBCXX_VISIBILITY(default)
 	  __exception_ptr::__dest_thunk<_Ex2>);
       __try
 	{
+#if __cplusplus >= 201103L
+	  ::new (__e) _Ex2(static_cast<_Ex&&>(__ex));
+#else
 	  ::new (__e) _Ex2(__ex);
+#endif
 	  return exception_ptr(__e);
 	}
       __catch(...)
