diff --git a/gcc/common/config/i386/cpuinfo.h b/gcc/common/config/i386/cpuinfo.h
index e7e575c79d4..3df2fdfc339 100644
--- a/gcc/common/config/i386/cpuinfo.h
+++ b/gcc/common/config/i386/cpuinfo.h
@@ -765,6 +765,12 @@ get_available_features (struct __processor_model *cpu_model,
 #define set_feature(f) \
   set_cpu_feature (cpu_model, cpu_features2, f)
 
+#ifdef __x86_64__
+  edx |= bit_CMOV;
+  edx |= bit_MMX;
+  edx |= bit_SSE;
+  edx |= bit_SSE2;
+#endif
   if (edx & bit_CMOV)
     set_feature (FEATURE_CMOV);
   if (edx & bit_MMX)
diff --git a/libstdc++-v3/include/bits/basic_string.h b/libstdc++-v3/include/bits/basic_string.h
index c90bd099b63..5aa78e865e0 100644
--- a/libstdc++-v3/include/bits/basic_string.h
+++ b/libstdc++-v3/include/bits/basic_string.h
@@ -550,6 +550,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
       static int
       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
       {
+        if (__n1 < __n2)
+          return -1;
+        else if (__n1 == __n2)
+          return 0;
+        else
+          return 1;
 	const difference_type __d = difference_type(__n1 - __n2);
 
 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
@@ -746,7 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
 	  {
 	    _M_init_local_buf();
 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
-			      __str.length() + 1);
+			      _S_local_capacity + 1);
 	  }
 	else
 	  {
@@ -813,7 +819,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
 	  {
 	    _M_init_local_buf();
 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
-			      __str.length() + 1);
+			      _S_local_capacity + 1);
 	    _M_length(__str.length());
 	    __str._M_set_length(0);
 	  }
@@ -1023,6 +1029,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @param  __svt  An object convertible to string_view.
        */
      template<typename _Tp>
+       [[gnu::always_inline]]
        _GLIBCXX20_CONSTEXPR
        _If_sv<_Tp, basic_string&>
        operator=(const _Tp& __svt)
@@ -1215,6 +1222,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
       resize(size_type __n)
       { this->resize(__n, _CharT()); }
 
+      __attribute__((__always_inline__))
+      void
+      __resize_default_init(size_type __n)
+      { reserve(__n); _M_set_length(__n); }
+
 #if __cplusplus >= 201103L
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
@@ -1276,8 +1288,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
       size_type
       capacity() const _GLIBCXX_NOEXCEPT
       {
+	size_type ac = _M_allocated_capacity;
 	size_t __sz = _M_is_local() ? size_type(_S_local_capacity)
-				     : _M_allocated_capacity;
+				     : ac;
 	if (__sz < _S_local_capacity || __sz > max_size ())
 	  __builtin_unreachable ();
 	return __sz;
@@ -1519,6 +1532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
        */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, basic_string&>
 	operator+=(const _Tp& __svt)
@@ -1688,6 +1702,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
        */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
         _If_sv<_Tp, basic_string&>
         append(const _Tp& __svt)
@@ -1960,6 +1975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
        */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, basic_string&>
 	assign(const _Tp& __svt)
@@ -2273,6 +2289,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, basic_string&>
 	insert(size_type __pos, const _Tp& __svt)
@@ -2750,6 +2767,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, basic_string&>
 	replace(size_type __pos, size_type __n, const _Tp& __svt)
@@ -2790,6 +2808,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Reference to this string.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, basic_string&>
 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
@@ -2948,6 +2967,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Index of start of first occurrence.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, size_type>
 	find(const _Tp& __svt, size_type __pos = 0) const
@@ -3014,6 +3034,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Index of start of last occurrence.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, size_type>
 	rfind(const _Tp& __svt, size_type __pos = npos) const
@@ -3099,6 +3120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11
        *  @return  Index of first occurrence.
       */
       template<typename _Tp>
+        [[gnu::always_inline]]
 	_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 	_If_sv<_Tp, size_type>
 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
diff --git a/libstdc++-v3/include/bits/basic_string.tcc b/libstdc++-v3/include/bits/basic_string.tcc
index bca55bc5658..894d3c67685 100644
--- a/libstdc++-v3/include/bits/basic_string.tcc
+++ b/libstdc++-v3/include/bits/basic_string.tcc
@@ -72,15 +72,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       if (_M_is_local())
 	if (__s._M_is_local())
 	  {
-	    if (length() && __s.length())
+	    if (true)
 	      {
 		_CharT __tmp_data[_S_local_capacity + 1];
 		traits_type::copy(__tmp_data, __s._M_local_buf,
-				  __s.length() + 1);
+				  _S_local_capacity + 1);
 		traits_type::copy(__s._M_local_buf, _M_local_buf,
-				  length() + 1);
+				  _S_local_capacity + 1);
 		traits_type::copy(_M_local_buf, __tmp_data,
-				  __s.length() + 1);
+				  _S_local_capacity + 1);
 	      }
 	    else if (__s.length())
 	      {
@@ -106,7 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
 	    __s._M_init_local_buf();
 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
-			      length() + 1);
+			      _S_local_capacity + 1);
 	    _M_data(__s._M_data());
 	    __s._M_data(__s._M_local_buf);
 	    _M_capacity(__tmp_capacity);
@@ -118,7 +118,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	    {
 	      _M_init_local_buf();
 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
-				__s.length() + 1);
+				_S_local_capacity + 1);
 	      __s._M_data(_M_data());
 	      _M_data(_M_local_buf);
 	    }
diff --git a/libstdc++-v3/include/bits/string_view.tcc b/libstdc++-v3/include/bits/string_view.tcc
index 54fc204a223..a103c3da8e2 100644
--- a/libstdc++-v3/include/bits/string_view.tcc
+++ b/libstdc++-v3/include/bits/string_view.tcc
@@ -44,6 +44,18 @@ namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
+  template <typename size_type>
+  inline constexpr auto __string_view_not_npos(size_type v) noexcept {
+#if defined __has_builtin
+#if __has_builtin(__builtin_assume)
+    __builtin_assume(v != size_type(-1));
+#elif __has_builtin(__builtin_unreachable)
+    if (v == size_type(-1)) __builtin_unreachable();
+#endif
+#endif
+    return v;
+  }
+
   template<typename _CharT, typename _Traits>
     constexpr typename basic_string_view<_CharT, _Traits>::size_type
     basic_string_view<_CharT, _Traits>::
@@ -71,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  // We already know that __first[0] == __s[0] but compare them again
 	  // anyway because __s is probably aligned, which helps memcmp.
 	  if (traits_type::compare(__first, __str, __n) == 0)
-	    return __first - _M_str;
+	    return __string_view_not_npos(__first - _M_str);
 	  __len = __last - ++__first;
 	}
       return npos;
@@ -88,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  const size_type __n = this->_M_len - __pos;
 	  const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
 	  if (__p)
-	    __ret = __p - this->_M_str;
+	    __ret = __string_view_not_npos(__p - this->_M_str);
 	}
       return __ret;
     }
diff --git a/libstdc++-v3/include/std/string_view b/libstdc++-v3/include/std/string_view
index 842f6ad89af..d3ed2d5d940 100644
--- a/libstdc++-v3/include/std/string_view
+++ b/libstdc++-v3/include/std/string_view
@@ -578,6 +578,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       static constexpr int
       _S_compare(size_type __n1, size_type __n2) noexcept
       {
+        if (__n1 < __n2)
+          return -1;
+        else if (__n1 == __n2)
+          return 0;
+        else
+          return 1;
 	using __limits = __gnu_cxx::__int_traits<int>;
 	const difference_type __diff = __n1 - __n2;
 	if (__diff > __limits::__max)
diff --git a/libstdc++-v3/libsupc++/exception_ptr.h b/libstdc++-v3/libsupc++/exception_ptr.h
index a7e5e527d21..674527b46b4 100644
--- a/libstdc++-v3/libsupc++/exception_ptr.h
+++ b/libstdc++-v3/libsupc++/exception_ptr.h
@@ -255,7 +255,11 @@ namespace std _GLIBCXX_VISIBILITY(default)
 	  __exception_ptr::__dest_thunk<_Ex2>);
       __try
 	{
+#if __cplusplus >= 201103L
+	  ::new (__e) _Ex2(static_cast<_Ex&&>(__ex));
+#else
 	  ::new (__e) _Ex2(__ex);
+#endif
 	  return exception_ptr(__e);
 	}
       __catch(...)
